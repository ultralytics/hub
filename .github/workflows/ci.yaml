# Ultralytics HUB Continuous Integration (CI) GitHub Actions tests

name: HUB CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  schedule:
    - cron: '0 0 * * *'  # runs at 00:00 UTC every day

jobs:
  Tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10']
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get cache dir  # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
        id: pip-cache
        run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
        shell: bash  # for Windows compatibility
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-${{ matrix.python-version }}-pip-
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip wheel
          pip install ultralytics==0.0.44 --extra-index-url https://download.pytorch.org/whl/cpu
      - name: Check environment
        run: |
          echo "RUNNER_OS is ${{ runner.os }}"
          echo "GITHUB_EVENT_NAME is ${{ github.event_name }}"
          echo "GITHUB_WORKFLOW is ${{ github.workflow }}"
          echo "GITHUB_ACTOR is ${{ github.actor }}"
          echo "GITHUB_REPOSITORY is ${{ github.repository }}"
          echo "GITHUB_REPOSITORY_OWNER is ${{ github.repository_owner }}"
          python --version
          pip --version
          pip list
      - name: Test HUB training
        continue-on-error: false
        shell: python
        env:
          APIKEY: ${{ secrets.ULTRALYTICS_HUB_APIKEY }}
        run: |        
          # sys.path.append(str(Path('.').resolve()))  # to find yolov5 module, moved into pip package          
          import os
          import ultralytics
          ultralytics.checks()
          key = os.environ['APIKEY']
          ultralytics.reset_model(key)  # reset trained model
          ultralytics.start(key)  # train model
      - name: Test HUB export
        if: github.event_name == 'schedule'
        shell: python
        env:
          APIKEY: ${{ secrets.ULTRALYTICS_HUB_APIKEY }}
        run: |        
          import os
          import time
          import ultralytics
          ultralytics.checks()
          key = os.environ['APIKEY']
          success = []
          for f in ('torchscript', 'onnx', 'openvino', 'coreml', 'saved_model', 'pb', 'tflite', 'edgetpu', 'tfjs',
                    'ultralytics_tflite', 'ultralytics_coreml'):
              try:
                  print(f'Starting {f} export... ', end='')
                  ultralytics.export_model(key, format=f)
                  time.sleep(300)  # wait for export to complete
                  success.append(ultralytics.get_export(key, format=f)['success'])
                  print('done ✅' if success[-1] else 'Error ❌')
              except Exception as e:
                  success.append(False)
                  print(f'Error ❌ {f} export {e}')
          assert all(success)
