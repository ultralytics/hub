# Ultralytics HUB Continuous Integration (CI) GitHub Actions tests

name: HUB CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'  # runs every 8 hours, starting at 02:00 UTC


jobs:
  Tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10']
    timeout-minutes: 90
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip' # caching pip dependencies
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip wheel
          pip install ultralytics --extra-index-url https://download.pytorch.org/whl/cpu
      - name: Check environment
        run: |
          echo "RUNNER_OS is ${{ runner.os }}"
          echo "GITHUB_EVENT_NAME is ${{ github.event_name }}"
          echo "GITHUB_WORKFLOW is ${{ github.workflow }}"
          echo "GITHUB_ACTOR is ${{ github.actor }}"
          echo "GITHUB_REPOSITORY is ${{ github.repository }}"
          echo "GITHUB_REPOSITORY_OWNER is ${{ github.repository_owner }}"
          python --version
          pip --version
          pip list
      - name: Test HUB training
        continue-on-error: false
        shell: python
        env:
          API_KEY: ${{ secrets.ULTRALYTICS_HUB_API_KEY }}
          MODEL_ID: ${{ secrets.ULTRALYTICS_HUB_MODEL_ID }}
        run: |
          import os
          from ultralytics import YOLO, hub
          api_key, model_id = os.environ['API_KEY'], os.environ['MODEL_ID']
          hub.login(api_key)
          hub.reset_model(model_id)
          model = YOLO('https://hub.ultralytics.com/models/' + model_id)
          model.train()
      - name: Test HUB export
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        shell: python
        env:
          API_KEY: ${{ secrets.ULTRALYTICS_HUB_API_KEY }}
          MODEL_ID: ${{ secrets.ULTRALYTICS_HUB_MODEL_ID }}
        run: |
          import os
          import time
          from ultralytics import YOLO, checks, hub
          checks()
          api_key, model_id = os.environ['API_KEY'], os.environ['MODEL_ID']
          hub.login(api_key)
          success = []
          for f in ('torchscript', 'onnx', 'openvino', 'coreml', 'saved_model', 'pb', 'tflite', 'edgetpu', 'tfjs',
                    'paddle', 'ultralytics_tflite', 'ultralytics_coreml'):
              backoff_times = [60, 120, 240, 480]  # exponential backoff waits in seconds
              for wait_time in backoff_times:
                  try:
                      print(f'Starting {f} export... ', end='')
                      hub.export_model(model_id, format=f)
                      time.sleep(wait_time)  # wait for export to complete
                      success.append(hub.get_export(model_id, format=f)['success'])
                      print('done ✅' if success[-1] else 'Error ❌')
                      break  # exit the loop if no exception is raised
                  except Exception as e:
                      if wait_time == backoff_times[-1]:  # if it's the last backoff time
                          success.append(False)
                          print(f'Error ❌ {f} export {e}')
                      else:
                          print(f'Retrying {f} export in {wait_time // 60} minutes due to error: {e}')
                          time.sleep(wait_time)
          assert all(success)
      - name: Notify on failure
        if: failure() && github.event_name == 'schedule'
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {"text": "<!channel> GitHub Actions error for ${{ github.workflow }} ❌\n\n\n*Repository:* https://github.com/${{ github.repository }}\n*Action:* https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n*Author:* ${{ github.actor }}\n*Event:* ${{ github.event_name }}\n*Job Status:* ${{ job.status }}\n"}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_HUBWEB }}
